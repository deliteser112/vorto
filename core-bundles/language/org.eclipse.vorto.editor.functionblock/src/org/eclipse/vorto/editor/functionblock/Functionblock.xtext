/**
 * Copyright (c) 2020 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * https://www.eclipse.org/legal/epl-2.0
 *
 * SPDX-License-Identifier: EPL-2.0
 */
grammar org.eclipse.vorto.editor.functionblock.Functionblock with org.eclipse.vorto.editor.datatype.Datatype

import "http://www.eclipse.org/vorto/metamodel/Datatype" as datatype
import "http://www.eclipse.org/vorto/metamodel/Functionblock"
import "http://www.eclipse.org/vorto/metamodel/Model" as model 

FunctionblockModel:
	'vortolang 1.0'
	'namespace' namespace = QualifiedName
    'version' version = VERSION
    (
    (('displayname' displayname=STRING)?) &     
    (('description' description=STRING)?)  &
    ('category' category=CATEGORY)?)
    
     (references += ModelReference)*	
	'functionblock' name= ID ('extends' superType = [FunctionblockModel | QualifiedName])? '{'
		functionblock = FunctionBlock
	'}'	
	(entities += Entity)*
	(enums+=Enum)*
;

FunctionBlock:
	{FunctionBlock}
	(((configuration = Configuration)?) &
	((status = Status)?)	&
	((fault = Fault)?) &
	
	(('events' '{'
		(events += Event)+
	'}')?) &
	
	('operations' '{'
		(operations += Operation)+
	'}')?)		
;

Configuration:
	{Configuration}
	'configuration' '{' 
		(properties += Property)*
	'}'
;

Status:
	{Status}
	'status' '{' 
		(properties += Property)*
	'}'
;

Fault:
	{Fault}
	'fault' '{' 
		(properties += Property)*
	'}'
;
 
Operation :
	 (extension ?= 'extension')? (presence = Presence)? (breakable ?= 'breakable')? name=ValidID '(' (params += Param (',' params+=Param)*)?')' ('returns'  returnType = ReturnType)? (description=STRING)?
;

ReturnType :
	ReturnDictonaryType | ReturnObjectType | ReturnPrimitiveType
;

ReturnDictonaryType :
	 (multiplicity ?= 'multiple')? returnType = DictionaryPropertyType ('<' constraintRule = ConstraintRule '>')?
;

ReturnObjectType :
	 (multiplicity ?= 'multiple')? returnType = [datatype::Type | QualifiedName] ('<' constraintRule = ConstraintRule '>')?
;

ReturnPrimitiveType :
	 (multiplicity ?= 'multiple')? returnType = PrimitiveType ('<' constraintRule = ConstraintRule '>')?
;

DictonaryParam:
	(multiplicity ?= 'multiple')? name = ValidID 'as' type = DictionaryPropertyType ('<' constraintRule = ConstraintRule '>')?  (description=STRING)?
;

PrimitiveParam:
	(multiplicity ?= 'multiple')? name = ValidID 'as' type = PrimitiveType ('<' constraintRule = ConstraintRule '>')?  (description=STRING)?
;

RefParam:
	(multiplicity ?= 'multiple')? name = ValidID 'as' type = [datatype::Type|QualifiedName] (description=STRING)?
;

Param:
    DictonaryParam | PrimitiveParam | RefParam
;
 
Event:
	 name = ID '{'
		(properties += Property)*
	'}'
;
